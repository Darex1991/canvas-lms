{"version":3,"sources":["webpack:///./packages/canvas-media/es/shared/CanvasSelect.js","webpack:///./packages/canvas-media/es/ClosedCaptionCreator/ClosedCaptionCreatorRow.js","webpack:///./packages/canvas-media/es/shared/shortid.js","webpack:///./packages/canvas-media/es/ClosedCaptionCreator/index.js"],"names":["CanvasSelectOption","createElement","CanvasSelectGroup","propTypes","id","isRequired","value","label","Component","props","super","this","backupKey","handleBlur","event","setState","highlightedOptionId","announcement","onBlur","handleShowOptions","isShowingOptions","handleHideOptions","_event","state","inputValue","getOptionLabelById","selectedOptionId","handleHighlightOption","_ref","text","nowOpen","translatedStrings","LIST_EXPANDED","type","concat","handleSelectOption","_ref2","LIST_COLLAPSED","prevSelection","OPTION_SELECTED","option","getOptionByFieldValue","onChange","_option","children","prevProps","_this$props","otherProps","noOptionsLabel","Fragment","Select","Object","assign","renderLabel","assistiveText","USE_ARROWS","onRequestShowOptions","onRequestHideOptions","onRequestHighlightOption","onRequestSelectOption","renderChildren","Alert","liveRegion","liveRegionPoliteness","screenReaderOnly","Array","isArray","matchComponentTypes","renderOption","renderGroup","renderNoOptionsOption","opts","map","child","filter","length","_option$props","optionProps","Option","key","isHighlighted","isSelected","group","_group$props","Group","c","oid","field","options","arguments","foundOpt","i","o","groupOptions","j","o2","defaultProps","handleLanguageChange","selectedLang","onLanguageSelected","languages","find","l","handleDeleteRow","_e","onDeleteRow","rowId","selectedFile","selectedLanguage","Flex","as","wrap","justifyItems","alignItems","renderSelectLanguage","renderChooseFile","_this$props$selectedL","CLOSED_CAPTIONS_SELECT_LANGUAGE","uploadMediaTranslations","UploadMediaStrings","Item","margin","ScreenReaderContent","placeholder","SelectStrings","_this$props$uploadMed","NO_FILE_CHOSEN","SUPPORTED_FILE_TYPES","CLOSED_CAPTIONS_CHOOSE_FILE","accept","ref","element","fileInput","e","onFileSelected","target","files","style","display","View","Text","Button","onClick","click","attachmentFileButton","name","color","REMOVE_FILE","borderWidth","padding","borderRadius","width","weight","IconButton","withBackground","withBorder","screenReaderLabel","lang","IconTrashLine","isReadonly","renderChosen","renderChoosing","shortId","String","fromCharCode","Math","floor","random","toString","substring","addingNewClosedCaption","newSelectedFile","newSelectedLanguage","subtitles","newButtonClick","newFile","prevState","language","file","isNew","updateSubtitles","ADDED_CAPTION","onRowDelete","subtitle","deletedLang","s","DELETED_CAPTION","_addButtonRef","window","setTimeout","focus","ADD_NEW_CAPTION_OR_SUBTITLE","isLiveRegionAtomic","cc","position","textAlign","elementRef","el","shape","IconAddLine"],"mappings":"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","file":"637-c-9db9d3b8e8.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\n/*\n * Copyright (C) 2020 - present Instructure, Inc.\n *\n * This file is part of Canvas.\n *\n * Canvas is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, version 3 of the License.\n *\n * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\n/*\n---\n  CanvasSelect is a wrapper on the new (as of instui 5 or 6 or so) controlled-only Select\n  While CanvasSelect is also controlled-only, it has a simpler api and is almost a drop-in\n  replacement for the old instui Select used throughout canvas at this time. One big difference\n  is the need to pass in an options property rather than rendering <Options> children\n\n  It does not currently support old-Select's allowCustom property\n  (see https://instructure.design/#DeprecatedSelect)\n\n  It only handles single-select. Multi-select will likely have to be in a separate component\n\n  <CanvasSelect\n    id=\"your-id\"\n    label=\"select's label\"\n    value={value}             // should match the ID of the selected option\n    onChange={handleChange}   // function(event, selectedOption)\n    {...otherPropsPassedToTheUnderlyingSelect}  // if you need to (width=\"100%\" is a popular one)\n  >\n    <CanvasSelect.Option key=\"1\" id=\"1\" value=\"1\">one</CanvasSelect.Option>\n    <CanvasSelect.Option key=\"2\" id=\"2\" value=\"2\">two</CanvasSelect.Option>\n    <CanvasSelect.Option key=\"3\" id=\"3\" value=\"3\">three</CanvasSelect.Option>\n  </CanvasSelect>\n---\n*/\n\n/*\n *  this file is a copy of canvas-lms/packages/canvas-planner/src/CanvasSelect.js\n *  but with strings passed in, rather then formatMessage'd here.\n */\nimport React from 'react';\nimport { func, node, string, shape, oneOfType } from 'prop-types';\nimport { compact, castArray, isEqual } from 'lodash';\nimport formatMessage from 'format-message';\nimport { Select } from '@instructure/ui-select';\nimport { Alert } from '@instructure/ui-alerts';\nimport { matchComponentTypes } from '@instructure/ui-react-utils';\nconst noOptionsOptionId = '_noOptionsOption'; // CanvasSelectOption and CanvasSelectGroup are components our client can create thru CanvasSelect\n// to pass us our options. They are never rendered themselves, but get transformed into INSTUI's\n// Select.Option and Select.Group on rendering CanvasSelect. See renderChildren below.\n\nfunction CanvasSelectOption() {\n  return React.createElement(\"div\", null);\n}\n\nCanvasSelectOption.propTypes = {\n  id: string.isRequired,\n  // eslint-disable-line react/no-unused-prop-types\n  value: string.isRequired // eslint-disable-line react/no-unused-prop-types\n\n};\n\nfunction CanvasSelectGroup() {\n  return React.createElement(\"div\", null);\n}\n\nCanvasSelectGroup.propTypes = {\n  label: string.isRequired // eslint-disable-line react/no-unused-prop-types\n\n};\nexport default class CanvasSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.backupKey = 0;\n\n    this.handleBlur = event => {\n      this.setState({\n        highlightedOptionId: null,\n        announcement: null\n      });\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n    };\n\n    this.handleShowOptions = () => {\n      this.setState({\n        isShowingOptions: true\n      });\n    };\n\n    this.handleHideOptions = _event => {\n      this.setState(state => {\n        const text = this.getOptionLabelById(state.selectedOptionId);\n        return {\n          isShowingOptions: false,\n          highlightedOptionId: null,\n          inputValue: text\n        };\n      });\n    };\n\n    this.handleHighlightOption = (event, _ref) => {\n      let id = _ref.id;\n      if (id === noOptionsOptionId) return;\n      const text = this.getOptionLabelById(id);\n      const nowOpen = this.state.isShowingOptions ? '' : this.props.translatedStrings.LIST_EXPANDED;\n      const inputValue = event.type === 'keydown' ? text : this.state.inputValue;\n      this.setState({\n        highlightedOptionId: id,\n        inputValue,\n        announcement: \"\".concat(text, \" \").concat(nowOpen)\n      });\n    };\n\n    this.handleSelectOption = (event, _ref2) => {\n      let id = _ref2.id;\n\n      if (id === noOptionsOptionId) {\n        this.setState({\n          isShowingOptions: false,\n          announcement: this.props.translatedStrings.LIST_COLLAPSED\n        });\n      } else {\n        const text = this.getOptionLabelById(id);\n        const prevSelection = this.state.selectedOptionId;\n        this.setState({\n          selectedOptionId: id,\n          inputValue: text,\n          isShowingOptions: false,\n          announcement: formatMessage(this.props.translatedStrings.OPTION_SELECTED, {\n            option: text\n          })\n        });\n        const option = this.getOptionByFieldValue('id', id);\n\n        if (prevSelection !== id) {\n          this.props.onChange(event, option.props.value);\n        }\n      }\n    };\n\n    const _option = this.getOptionByFieldValue('value', props.value);\n\n    this.state = {\n      inputValue: _option ? _option.props.children : '',\n      isShowingOptions: false,\n      highlightedOptionId: null,\n      selectedOptionId: _option ? _option.props.id : null,\n      announcement: null\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.value !== prevProps.value || !isEqual(this.props.children, prevProps.children)) {\n      const option = this.getOptionByFieldValue('value', this.props.value); // eslint-disable-next-line react/no-did-update-set-state\n\n      this.setState({\n        inputValue: option ? option.props.children : '',\n        selectedOptionId: option ? option.props.id : ''\n      });\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          id = _this$props.id,\n          label = _this$props.label,\n          value = _this$props.value,\n          onChange = _this$props.onChange,\n          children = _this$props.children,\n          noOptionsLabel = _this$props.noOptionsLabel,\n          otherProps = _objectWithoutProperties(_this$props, [\"id\", \"label\", \"value\", \"onChange\", \"children\", \"noOptionsLabel\"]);\n\n    return React.createElement(React.Fragment, null, React.createElement(Select, Object.assign({\n      id: id,\n      renderLabel: () => label,\n      assistiveText: this.props.translatedStrings.USE_ARROWS,\n      inputValue: this.state.inputValue,\n      isShowingOptions: this.state.isShowingOptions,\n      onBlur: this.handleBlur,\n      onRequestShowOptions: this.handleShowOptions,\n      onRequestHideOptions: this.handleHideOptions,\n      onRequestHighlightOption: this.handleHighlightOption,\n      onRequestSelectOption: this.handleSelectOption\n    }, otherProps), this.renderChildren(children)), React.createElement(Alert, {\n      liveRegion: this.props.liveRegion,\n      liveRegionPoliteness: \"assertive\",\n      screenReaderOnly: true\n    }, this.state.announcement));\n  }\n\n  renderChildren(children) {\n    if (!Array.isArray(children)) {\n      // children is 1 child\n      if (matchComponentTypes(children, [CanvasSelectOption])) {\n        return this.renderOption(children);\n      } else if (matchComponentTypes(children, [CanvasSelectGroup])) {\n        return this.renderGroup(children);\n      } else {\n        return this.renderNoOptionsOption();\n      }\n    }\n\n    const opts = children.map(child => {\n      if (Array.isArray(child)) {\n        return this.renderChildren(child);\n      } else if (matchComponentTypes(child, [CanvasSelectOption])) {\n        return this.renderOption(child);\n      } else if (matchComponentTypes(child, [CanvasSelectGroup])) {\n        return this.renderGroup(child);\n      }\n\n      return null;\n    }).filter(child => !!child); // instui Select blows up on undefined options\n\n    if (opts.length === 0) {\n      return this.renderNoOptionsOption();\n    }\n\n    return opts;\n  }\n\n  renderOption(option) {\n    const _option$props = option.props,\n          id = _option$props.id,\n          children = _option$props.children,\n          optionProps = _objectWithoutProperties(_option$props, [\"id\", \"children\"]);\n\n    return React.createElement(Select.Option, Object.assign({\n      id: id,\n      key: option.key || id || ++this.backupKey,\n      isHighlighted: id === this.state.highlightedOptionId,\n      isSelected: id === this.state.selectedOptionId\n    }, optionProps), children);\n  }\n\n  renderGroup(group) {\n    const _group$props = group.props,\n          id = _group$props.id,\n          label = _group$props.label,\n          otherProps = _objectWithoutProperties(_group$props, [\"id\", \"label\"]);\n\n    const children = compact(castArray(group.props.children));\n    return React.createElement(Select.Group, Object.assign({\n      \"data-testid\": \"Group:\".concat(label),\n      renderLabel: () => label,\n      key: group.key || id || ++this.backupKey\n    }, otherProps), children.map(c => this.renderOption(c)));\n  }\n\n  renderNoOptionsOption() {\n    return React.createElement(Select.Option, {\n      id: noOptionsOptionId,\n      isHighlighted: false,\n      isSelected: false\n    }, this.props.noOptionsLabel);\n  }\n\n  getOptionLabelById(oid) {\n    const option = this.getOptionByFieldValue('id', oid);\n    return option ? option.props.children : '';\n  }\n\n  getOptionByFieldValue(field, value) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : castArray(this.props.children);\n    if (!this.props.children) return null;\n    let foundOpt = null;\n\n    for (let i = 0; i < options.length; ++i) {\n      const o = options[i];\n\n      if (Array.isArray(o)) {\n        foundOpt = this.getOptionByFieldValue(field, value, o);\n      } else if (matchComponentTypes(o, [CanvasSelectOption])) {\n        if (o.props[field] === value) {\n          foundOpt = o;\n        }\n      } else if (matchComponentTypes(o, [CanvasSelectGroup])) {\n        const groupOptions = castArray(o.props.children);\n\n        for (let j = 0; j < groupOptions.length; ++j) {\n          const o2 = groupOptions[j];\n\n          if (o2.props[field] === value) {\n            foundOpt = o2;\n            break;\n          }\n        }\n      }\n\n      if (foundOpt) {\n        break;\n      }\n    }\n\n    return foundOpt;\n  }\n\n}\nCanvasSelect.Option = CanvasSelectOption;\nCanvasSelect.Group = CanvasSelectGroup;\nCanvasSelect.propTypes = {\n  id: string,\n  label: oneOfType([node, func]).isRequired,\n  liveRegion: func,\n  value: string,\n  onChange: func.isRequired,\n  children: node,\n  noOptionsLabel: string,\n  // unselectable option to display when there are no options\n  translatedStrings: shape({\n    USE_ARROWS: string.isRequired,\n    LIST_COLLAPSED: string.isRequired,\n    LIST_EXPANDED: string.isRequired,\n    OPTION_SELECTED: string.isRequired\n  }),\n  onBlur: func\n};\nCanvasSelect.defaultProps = {\n  noOptionsLabel: '---'\n};","/*\n * Copyright (C) 2019 - present Instructure, Inc.\n *\n * This file is part of Canvas.\n *\n * Canvas is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, version 3 of the License.\n *\n * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nimport React, { Component } from 'react';\nimport { arrayOf, func, objectOf, shape, string } from 'prop-types';\nimport formatMessage from 'format-message';\nimport { Button, IconButton } from '@instructure/ui-buttons';\nimport { Flex } from '@instructure/ui-flex';\nimport { IconTrashLine } from '@instructure/ui-icons';\nimport { ScreenReaderContent } from '@instructure/ui-a11y';\nimport { Text } from '@instructure/ui-elements';\nimport { View } from '@instructure/ui-view';\nimport CanvasSelect from '../shared/CanvasSelect';\nexport default class ClosedCaptionCreatorRow extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.handleLanguageChange = (event, selectedLang) => {\n      this.props.onLanguageSelected(this.props.languages.find(l => l.id === selectedLang));\n    };\n\n    this.handleDeleteRow = _e => {\n      this.props.onDeleteRow({\n        id: this.props.rowId\n      });\n    };\n  }\n\n  get isReadonly() {\n    return this.props.selectedFile && this.props.selectedLanguage;\n  }\n\n  renderChoosing() {\n    return React.createElement(Flex, {\n      as: \"div\",\n      wrap: \"wrap\",\n      justifyItems: \"start\",\n      alignItems: \"end\",\n      \"data-testid\": \"CC-CreatorRow-choosing\"\n    }, this.renderSelectLanguage(), this.renderChooseFile());\n  }\n\n  renderSelectLanguage() {\n    var _this$props$selectedL;\n\n    const CLOSED_CAPTIONS_SELECT_LANGUAGE = this.props.uploadMediaTranslations.UploadMediaStrings.CLOSED_CAPTIONS_SELECT_LANGUAGE;\n    return React.createElement(Flex.Item, {\n      margin: \"0 small small 0\"\n    }, React.createElement(CanvasSelect, {\n      value: (_this$props$selectedL = this.props.selectedLanguage) === null || _this$props$selectedL === void 0 ? void 0 : _this$props$selectedL.id,\n      label: React.createElement(ScreenReaderContent, null, CLOSED_CAPTIONS_SELECT_LANGUAGE),\n      liveRegion: this.props.liveRegion,\n      onChange: this.handleLanguageChange,\n      placeholder: CLOSED_CAPTIONS_SELECT_LANGUAGE,\n      translatedStrings: this.props.uploadMediaTranslations.SelectStrings\n    }, this.props.languages.map(o => {\n      return React.createElement(CanvasSelect.Option, {\n        key: o.id,\n        id: o.id,\n        value: o.id\n      }, o.label);\n    })));\n  }\n\n  renderChooseFile() {\n    const _this$props$uploadMed = this.props.uploadMediaTranslations.UploadMediaStrings,\n          NO_FILE_CHOSEN = _this$props$uploadMed.NO_FILE_CHOSEN,\n          SUPPORTED_FILE_TYPES = _this$props$uploadMed.SUPPORTED_FILE_TYPES,\n          CLOSED_CAPTIONS_CHOOSE_FILE = _this$props$uploadMed.CLOSED_CAPTIONS_CHOOSE_FILE;\n    return React.createElement(Flex.Item, {\n      margin: \"0 small small 0\"\n    }, React.createElement(\"input\", {\n      id: \"attachmentFile\",\n      accept: \".vtt, .srt\",\n      ref: element => {\n        this.fileInput = element;\n      },\n      onChange: e => {\n        this.props.onFileSelected(e.target.files[0]);\n      },\n      style: {\n        display: 'none'\n      },\n      type: \"file\"\n    }), React.createElement(View, {\n      as: \"div\"\n    }, React.createElement(Text, {\n      as: \"div\"\n    }, SUPPORTED_FILE_TYPES), React.createElement(Button, {\n      margin: \"xx-small 0 0 0\",\n      id: \"attachmentFileButton\",\n      onClick: () => {\n        this.fileInput.click();\n      },\n      ref: element => {\n        this.attachmentFileButton = element;\n      }\n    }, this.props.selectedFile ? this.props.selectedFile.name : CLOSED_CAPTIONS_CHOOSE_FILE), !this.props.selectedFile && React.createElement(View, {\n      display: \"inline-block\",\n      margin: \"0 0 0 small\"\n    }, React.createElement(Text, {\n      color: \"secondary\"\n    }, NO_FILE_CHOSEN))));\n  }\n\n  renderChosen() {\n    const REMOVE_FILE = this.props.uploadMediaTranslations.UploadMediaStrings.REMOVE_FILE;\n    return React.createElement(Flex, {\n      as: \"div\",\n      wrap: \"wrap\",\n      justifyItems: \"start\",\n      alignItems: \"end\",\n      \"data-testid\": \"CC-CreatorRow-chosen\"\n    }, React.createElement(Flex.Item, {\n      margin: \"0 0 small 0\"\n    }, React.createElement(View, {\n      as: \"div\",\n      borderWidth: \"small\",\n      padding: \"0 0 0 small\",\n      borderRadius: \"medium\",\n      width: \"100%\"\n    }, React.createElement(Flex, {\n      justifyItems: \"space-between\"\n    }, React.createElement(Flex.Item, null, React.createElement(Text, {\n      weight: \"bold\"\n    }, this.props.selectedLanguage.label)), React.createElement(Flex.Item, {\n      margin: \"0 0 0 x-small\"\n    }, React.createElement(IconButton, {\n      withBackground: false,\n      withBorder: false,\n      onClick: this.handleDeleteRow,\n      screenReaderLabel: formatMessage(REMOVE_FILE, {\n        lang: this.props.selectedLanguage.label\n      })\n    }, React.createElement(IconTrashLine, null)))))));\n  }\n\n  render() {\n    return this.isReadonly ? this.renderChosen() : this.renderChoosing();\n  }\n\n}\nClosedCaptionCreatorRow.propTypes = {\n  rowId: string,\n  languages: arrayOf(shape({\n    id: string,\n    label: string\n  })),\n  liveRegion: func,\n  uploadMediaTranslations: shape({\n    UploadMediaStrings: objectOf(string),\n    SelectStrings: objectOf(string)\n  }),\n  onDeleteRow: func,\n  onFileSelected: func,\n  onLanguageSelected: func,\n  selectedFile: shape({\n    name: string.isRequired\n  }),\n  // there's more, but his is all I care about\n  selectedLanguage: shape({\n    id: string.isRequired,\n    label: string.isRequired\n  })\n};","/*\n * Copyright (C) 2019 - present Instructure, Inc.\n *\n * This file is part of Canvas.\n *\n * Canvas is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, version 3 of the License.\n *\n * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nexport default function shortId() {\n  const prefix = String.fromCharCode(97 + Math.floor(Math.random() * 26));\n  const id = Math.random().toString(36).substring(2, 10);\n  return prefix + id;\n}","/*\n * Copyright (C) 2019 - present Instructure, Inc.\n *\n * This file is part of Canvas.\n *\n * Canvas is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, version 3 of the License.\n *\n * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see <http://www.gnu.org/licenses/>.\n */\nimport React, { Component } from 'react';\nimport { arrayOf, func, objectOf, shape, string } from 'prop-types';\nimport formatMessage from 'format-message';\nimport { Alert } from '@instructure/ui-alerts';\nimport { IconButton } from '@instructure/ui-buttons';\nimport { IconAddLine } from '@instructure/ui-icons';\nimport { View } from '@instructure/ui-view';\nimport ClosedCaptionCreatorRow from './ClosedCaptionCreatorRow';\nimport shortId from '../shared/shortid'; // TODO:\n//   - Limit file creation\n//   - Get current subtitles from API\n//   - Upload new subtitles via API\n//   - Download existing subtitles via download button\n//   - Delete existing subtitles locally and via API\n\nexport default class ClosedCaptionPanel extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      addingNewClosedCaption: true,\n      newSelectedFile: null,\n      newSelectedLanguage: null,\n      subtitles: [],\n      announcement: null\n    };\n\n    this.newButtonClick = () => {\n      this.setState({\n        addingNewClosedCaption: true,\n        newSelectedFile: null,\n        newSelectedLanguage: null,\n        announcement: null\n      });\n    };\n\n    this.onFileSelected = newFile => {\n      if (this.state.newSelectedLanguage && newFile) {\n        this.setState(prevState => {\n          const subtitles = prevState.subtitles.concat([{\n            id: shortId(),\n            language: prevState.newSelectedLanguage.id,\n            file: newFile,\n            isNew: true\n          }]);\n          this.props.updateSubtitles(subtitles);\n          return {\n            subtitles,\n            addingNewClosedCaption: false,\n            newSelectedFile: null,\n            newSelectedLanguage: null,\n            announcement: formatMessage(this.props.uploadMediaTranslations.UploadMediaStrings.ADDED_CAPTION, {\n              lang: prevState.newSelectedLanguage.label\n            })\n          };\n        });\n      } else {\n        this.setState({\n          newSelectedFile: newFile,\n          announcement: null\n        });\n      }\n    };\n\n    this.onLanguageSelected = lang => {\n      if (this.state.newSelectedFile) {\n        this.setState(prevState => {\n          const subtitles = prevState.subtitles.concat([{\n            id: shortId(),\n            language: lang.id,\n            file: prevState.newSelectedFile,\n            isNew: true\n          }]);\n          this.props.updateSubtitles(subtitles);\n          return {\n            subtitles,\n            addingNewClosedCaption: false,\n            newSelectedFile: null,\n            newSelectedLanguage: null,\n            announcement: formatMessage(this.props.uploadMediaTranslations.UploadMediaStrings.ADDED_CAPTION, {\n              lang: lang.label\n            })\n          };\n        });\n      } else {\n        this.setState({\n          newSelectedLanguage: lang,\n          announcement: null\n        });\n      }\n    };\n\n    this.onRowDelete = subtitle => {\n      if (subtitle.id) {\n        this.setState(prevState => {\n          const deletedLang = this.props.languages.find(l => l.id === subtitle.id);\n          const subtitles = prevState.subtitles.filter(s => s.id !== subtitle.id);\n          this.props.updateSubtitles(subtitles);\n          return {\n            subtitles,\n            addingNewClosedCaption: subtitles.length > 0 ? prevState.addingNewClosedCaption : true,\n            announcement: formatMessage(this.props.uploadMediaTranslations.UploadMediaStrings.DELETED_CAPTION, {\n              lang: deletedLang === null || deletedLang === void 0 ? void 0 : deletedLang.label\n            })\n          };\n        });\n      } else {\n        // should never get here\n        this.setState({\n          addingNewClosedCaption: true,\n          newSelectedFile: null,\n          newSelectedLanguage: null,\n          announcement: null\n        });\n      }\n    };\n  }\n\n  componentDidUpdate() {\n    if (this._addButtonRef) {\n      window.setTimeout(() => {\n        this._addButtonRef && this._addButtonRef.focus();\n      }, 100);\n    }\n  }\n\n  render() {\n    const ADD_NEW_CAPTION_OR_SUBTITLE = this.props.uploadMediaTranslations.UploadMediaStrings.ADD_NEW_CAPTION_OR_SUBTITLE;\n    return React.createElement(View, {\n      display: \"inline-block\",\n      \"data-testid\": \"ClosedCaptionPanel\"\n    }, this.state.announcement && React.createElement(Alert, {\n      liveRegion: this.props.liveRegion,\n      screenReaderOnly: true,\n      isLiveRegionAtomic: true,\n      liveRegionPoliteness: \"assertive\"\n    }, this.state.announcement), React.createElement(View, {\n      display: \"inline-block\"\n    }, this.state.subtitles.map(cc => React.createElement(ClosedCaptionCreatorRow, {\n      key: cc.id,\n      liveRegion: this.props.liveRegion,\n      uploadMediaTranslations: this.props.uploadMediaTranslations,\n      onDeleteRow: this.onRowDelete,\n      onLanguageSelected: this.onLanguageSelected,\n      onFileSelected: this.onFileSelected,\n      languages: this.props.languages,\n      selectedLanguage: this.props.languages.find(l => l.id === cc.language),\n      selectedFile: cc.file,\n      rowId: cc.id\n    }))), this.state.addingNewClosedCaption ? React.createElement(View, {\n      as: \"div\"\n    }, React.createElement(ClosedCaptionCreatorRow, {\n      liveRegion: this.props.liveRegion,\n      uploadMediaTranslations: this.props.uploadMediaTranslations,\n      onDeleteRow: this.onRowDelete,\n      onLanguageSelected: this.onLanguageSelected,\n      onFileSelected: this.onFileSelected,\n      languages: this.props.languages,\n      selectedLanguage: this.state.newSelectedLanguage,\n      selectedFile: this.state.newSelectedFile\n    })) : React.createElement(\"div\", {\n      style: {\n        position: 'relative',\n        textAlign: 'center'\n      }\n    }, React.createElement(IconButton, {\n      elementRef: el => {\n        this._addButtonRef = el;\n      },\n      shape: \"circle\",\n      color: \"primary\",\n      screenReaderLabel: ADD_NEW_CAPTION_OR_SUBTITLE,\n      onClick: this.newButtonClick,\n      margin: \"x-small auto\"\n    }, React.createElement(IconAddLine, null))));\n  }\n\n}\nClosedCaptionPanel.propTypes = {\n  liveRegion: func.isRequired,\n  updateSubtitles: func.isRequired,\n  uploadMediaTranslations: shape({\n    UploadMediaStrings: objectOf(string),\n    SelectStrings: objectOf(string)\n  }).isRequired,\n  languages: arrayOf(shape({\n    id: string,\n    label: string\n  })).isRequired\n};"],"sourceRoot":""}
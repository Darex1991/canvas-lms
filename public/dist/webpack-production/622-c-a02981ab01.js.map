{"version":3,"sources":["webpack:///./app/coffeescripts/util/kalturaAnalytics.js"],"names":["KalturaAnalytics","constructor","mediaId","mediaElement","pluginSettings","queueAnalyticEvent","eventId","data","_","clone","this","defaultData","duration","parseInt","currentTime","Date","getTime","queueApiCall","apiUrl","$","param","ensureAnalyticSession","kaSession","cookie","path","Math","random","toString","replace","generateApiUrl","domain","window","location","protocol","setupApiIframes","count","qIndex","iframes","i","end","asc","iframe","document","createElement","addClass","body","append","queue","f","url","shift","src","pinger","throttle","parallel_api_calls","push","length","addListeners","addEventListener","pauseObserved","endedObserved","endedOnce","_lastTime","_isFullScreen","e","listeningToPlaying","setInterval","paused","isNaN","isFullScreen","stopPoints","j","cueTime","service","action","partner_id","kcw_ui_conf","href","do_analytics","ka"],"mappings":"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","file":"622-c-a02981ab01.js","sourcesContent":["//\n// Copyright (C) 2013 - present Instructure, Inc.\n//\n// This file is part of Canvas.\n//\n// Canvas is free software: you can redistribute it and/or modify it under\n// the terms of the GNU Affero General Public License as published by the Free\n// Software Foundation, version 3 of the License.\n//\n// Canvas is distributed in the hope that it will be useful, but WITHOUT ANY\n// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n// A PARTICULAR PURPOSE. See the GNU Affero General Public License for more\n// details.\n//\n// You should have received a copy of the GNU Affero General Public License along\n// with this program. If not, see <http://www.gnu.org/licenses/>.\n\nimport $ from 'jquery'\nimport _ from 'underscore'\nimport 'jquery.cookie'\n\n// A class to setup kaltura analytics listeners on a mediaElement player\n// for a specific video being played\n// As events are created they are sent to kaltura's analytics api\nclass KalturaAnalytics {\n  constructor(mediaId, mediaElement, pluginSettings) {\n    this.mediaId = mediaId\n    this.mediaElement = mediaElement\n    this.pluginSettings = pluginSettings\n    this.ensureAnalyticSession()\n    this.generateApiUrl()\n\n    this.defaultData = {\n      service: 'stats',\n      action: 'collect',\n      'event:entryId': this.mediaId,\n      'event:sessionId': this.kaSession,\n      'event:isFirstInSession': 'false',\n      'event:objectType': 'KalturaStatsEvent',\n      'event:partnerId': this.pluginSettings.partner_id,\n      'event:uiconfId': this.pluginSettings.kcw_ui_conf,\n      'event:queryStringReferrer': window.location.href\n    }\n  }\n\n  // Builds the url to send the analytic event and adds it to the processing queue\n  queueAnalyticEvent = eventId => {\n    const data = _.clone(this.defaultData)\n    data['event:eventType'] = eventId\n    data['event:duration'] = this.mediaElement.duration\n    data['event:currentPoint'] = parseInt(this.mediaElement.currentTime * 1000)\n    data['event:eventTimestamp'] = new Date().getTime()\n\n    return this.queueApiCall(this.apiUrl + $.param(data))\n  }\n\n  // kaltura expects a persistent analytic session token for the user\n  // this generates a simple session id for analytic purposes\n  // no session/authentication is associated with this token\n  ensureAnalyticSession = () => {\n    this.kaSession = $.cookie('kaltura_analytic_tracker', undefined, {path: '/'})\n    if (!this.kaSession) {\n      this.kaSession = (\n        Math.random().toString(16) +\n        Math.random().toString(16) +\n        Math.random().toString(16)\n      ).replace(/\\./g, '')\n      return $.cookie('kaltura_analytic_tracker', this.kaSession, {path: '/'})\n    }\n  }\n\n  // pulls the kaltura domain from the plugin settins and sets up the base\n  // url for sending analytics events\n  generateApiUrl = () => {\n    let domain\n    if (window.location.protocol === 'http:') {\n      domain = `http://${this.pluginSettings.domain}`\n    } else {\n      domain = `https://${this.pluginSettings.domain}`\n    }\n\n    return (this.apiUrl = `${domain}/api_v3/index.php?`)\n  }\n\n  // Since the analytic call is a cross-domain call, set the url in an iFrame\n  setupApiIframes = count => {\n    this.qIndex = 0\n    this.iframes = []\n    for (let i = 0, end = count - 1, asc = end >= 0; asc ? i <= end : i >= end; asc ? i++ : i--) {\n      const iframe = document.createElement('iframe')\n      $(iframe).addClass('hidden kaltura-analytics')\n      $(document.body).append($(iframe))\n\n      // there is no reliable way to know when a remote url has loaded in an\n      // iframe, so just send them every 4 seconds\n      const queue = []\n      const f = ((iframe, queue) =>\n        function() {\n          let url\n          if ((url = queue.shift())) {\n            return (iframe.src = url)\n          }\n        })(iframe, queue)\n      this.iframes[i] = {iframe, queue, pinger: _.throttle(f, 4000)}\n    }\n    return this.iframes\n  }\n\n  queueApiCall = url => {\n    if (!this.iframes) {\n      this.setupApiIframes(this.pluginSettings.parallel_api_calls || 3)\n    }\n    this.iframes[this.qIndex].queue.push(url)\n    this.iframes[this.qIndex].pinger()\n    this.qIndex = (this.qIndex + 1) % this.iframes.length\n    return this.qIndex\n  }\n\n  // Adds event listenrs to the mediaElement player\n  //\n  // Tracks events for widget loaded, play, replay, media loaded, seek, buffer\n  // open full screen, close full screen, and play progress\n  addListeners = () => {\n    this.queueAnalyticEvent(1) // widget loaded\n\n    this.mediaElement.addEventListener('play', () => {\n      this.mediaElement.pauseObserved = false\n      this.mediaElement.endedObserved = false\n      if (this.mediaElement.endedOnce) {\n        this.queueAnalyticEvent(mediaId, 16) // Replay\n        this.mediaElement.endedOnce = false\n      }\n      return this.queueAnalyticEvent(3)\n    }) // Play\n\n    this.mediaElement.addEventListener('canplay', () => this.queueAnalyticEvent(2)) // media loaded\n\n    this.mediaElement.addEventListener('seeked', () => {\n      if (this.mediaElement.endedObserved) return\n      return this.queueAnalyticEvent(17)\n    }) // 'seek'\n\n    this.mediaElement.addEventListener('pause', () => {\n      if (this.mediaElement.pauseObserved) return\n      return (this.mediaElement.pauseObserved = true)\n    })\n\n    // first time loaded\n    this.mediaElement.addEventListener('progress', () => {\n      if (!this.mediaElement.endedOnce) {\n        return this.queueAnalyticEvent(12)\n      }\n    }) // 'progress / buffering'\n\n    let _lastTime = 0\n    let _isFullScreen = false\n    return this.mediaElement.addEventListener(\n      'playing',\n      e => {\n        if (this.mediaElement.listeningToPlaying) return\n\n        const interval = setInterval(() => {\n          if (\n            this.mediaElement.paused ||\n            isNaN(this.mediaElement.duration) ||\n            !this.mediaElement.duration\n          )\n            return\n\n          if (this.mediaElement.isFullScreen !== _isFullScreen) {\n            if (!_isFullScreen) {\n              this.queueAnalyticEvent(14) // open full screen\n            } else {\n              this.queueAnalyticEvent(15) // close full screen\n            }\n            _isFullScreen = this.mediaElement.isFullScreen\n          }\n\n          const stopPoints = [\n            0.25 * this.mediaElement.duration,\n            0.5 * this.mediaElement.duration,\n            0.75 * this.mediaElement.duration,\n            0.98 * this.mediaElement.duration // :)\n          ]\n          const {currentTime} = this.mediaElement\n          if (!isNaN(currentTime) && currentTime > 0) {\n            let j = stopPoints.length - 1\n\n            while (j >= 0) {\n              const cueTime = stopPoints[j]\n              if (cueTime > _lastTime && cueTime <= currentTime) {\n                if (j === 0) {\n                  this.queueAnalyticEvent(4) // play reached 25\n                } else if (j === 1) {\n                  this.queueAnalyticEvent(5) // play reached 50\n                } else if (j === 2) {\n                  this.queueAnalyticEvent(6) // play reached 75\n                } else if (j === 3) {\n                  this.queueAnalyticEvent(7) // play reached \"100\"\n                }\n              }\n              --j\n            }\n            return (_lastTime = currentTime)\n          }\n        }, 50)\n        return (this.mediaElement.listeningToPlaying = true)\n      },\n      false\n    )\n  }\n}\n\nexport default function(mediaId, mediaElement, pluginSettings) {\n  if (pluginSettings && pluginSettings.do_analytics) {\n    const ka = new KalturaAnalytics(mediaId, mediaElement, pluginSettings)\n    ka.addListeners()\n    return ka\n  }\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./node_modules/graphql/language/kinds.mjs","webpack:///./node_modules/graphql/language/blockString.mjs","webpack:///./node_modules/graphql/language/lexer.mjs","webpack:///./node_modules/graphql/language/parser.mjs","webpack:///./node_modules/graphql/language/directiveLocation.mjs","webpack:///./node_modules/graphql/language/tokenKind.mjs","webpack:///./node_modules/graphql/language/visitor.mjs","webpack:///./node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs","webpack:///./node_modules/graphql/jsutils/defineToStringTag.mjs","webpack:///./node_modules/graphql/language/printer.mjs","webpack:///./node_modules/graphql/error/GraphQLError.mjs","webpack:///./node_modules/graphql/language/source.mjs","webpack:///./node_modules/graphql/error/syntaxError.mjs","webpack:///./node_modules/graphql/jsutils/inspect.mjs","webpack:///./node_modules/graphql/jsutils/devAssert.mjs","webpack:///./node_modules/graphql/jsutils/defineToJSON.mjs","webpack:///./node_modules/graphql/language/location.mjs","webpack:///./node_modules/graphql/jsutils/isObjectLike.mjs","webpack:///./node_modules/graphql/language/printLocation.mjs"],"names":["Kind","Object","freeze","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","dedentBlockStringValue","rawString","lines","split","commonIndent","getBlockStringIndentation","i","length","slice","isBlank","shift","pop","join","line","indent","leadingWhitespace","str","printBlockString","value","indentation","arguments","undefined","preferMultipleLines","isSingleLine","indexOf","hasLeadingSpace","hasTrailingQuote","printAsMultipleLines","result","replace","createLexer","source","options","startOfFileToken","Tok","SOF","lastToken","token","lineStart","advance","advanceLexer","lookahead","this","kind","EOF","next","readToken","COMMENT","isPunctuatorToken","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","start","end","column","prev","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","concat","toString","toUpperCase","lexer","body","bodyLength","pos","startPosition","position","charCodeAt","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","readNumber","chunkStart","rawValue","BLOCK_STRING","readBlockString","charCode","a","b","c","d","char2hex","invalidSequence","readString","unexpectedCharacterMessage","parse","Parser","parseDocument","parseValue","parser","expectToken","parseValueLiteral","parseType","type","parseTypeReference","sourceObj","_lexer","_options","_proto","prototype","parseName","loc","definitions","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","operation","name","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","defaultValue","expectOptionalToken","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","parseArguments","isConst","item","parseConstArgument","parseArgument","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","expectKeyword","experimentalFragmentVariables","parseList","parseObject","parseStringLiteral","block","_this","values","any","_this2","fields","parseObjectField","push","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","description","interfaces","parseImplementsInterfaces","parseFieldsDefinition","types","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","locations","parseDirectiveLocations","parseDirectiveLocation","startToken","noLocation","Loc","getTokenDesc","atToken","openKind","parseFn","closeKind","nodes","call","endToken","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","TokenKind","QueryDocumentKeys","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","BREAK","visit","root","visitor","visitorKeys","stack","inArray","Array","isArray","keys","index","edits","node","key","parent","path","ancestors","newRoot","isLeaving","isEdited","clone","_i2","_Object$keys2","k","editOffset","ii","editKey","editValue","splice","isNode","Error","visitFn","getVisitFn","maybeNode","Boolean","visitInParallel","visitors","skipping","enter","fn","apply","leave","visitWithTypeInfo","typeInfo","kindVisitor","kindSpecificVisitor","specificVisitor","specificKindVisitor","nodejsCustomInspectSymbol","Symbol","for","defineToStringTag","classObject","toStringTag","defineProperty","get","constructor","print","ast","printDocASTReducer","op","varDefs","wrap","_ref","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","_ref21","addDescription","_ref22","_ref23","_ref24","hasMultilineItems","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","_ref38","cb","maybeArray","separator","filter","x","array","maybeString","isMultiline","string","some","GraphQLError","message","positions","originalError","extensions","_nodes","_source","_locations","_positions","reduce","list","map","_extensions","originalExtensions","defineProperties","enumerable","writable","configurable","captureStackTrace","printError","error","output","_error$nodes2","_i4","_error$locations2","location","create","Source","locationOffset","syntaxError","_typeof","obj","iterator","inspect","formatValue","seenValues","previouslySeenValues","customInspectFn","object","getCustomFn","customValue","len","Math","min","remaining","items","formatArray","tag","getObjectTag","formatObject","formatObjectValue","devAssert","condition","defineToJSON","toJSON","getLocation","match","lineRegexp","exec","isObjectLike","printLocation","printSourceLocation","sourceLocation","firstLineColumnOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","locationLine","sublineIndex","floor","sublineColumnNum","sublines","printPrefixedLines","subline","existingLines","padLen","max","prefix"],"mappings":"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","file":"39-c-5336252c63.js","sourcesContent":["/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n} // @internal\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  return commonIndent === null ? 0 : commonIndent;\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n","import defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { dedentBlockStringValue } from './blockString';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n// @internal\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or e\n\n\n  if (code === 46 || code === 69 || code === 101) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}\n","import inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { Kind } from './kinds';\nimport { Source } from './source';\nimport { createLexer } from './lexer';\nimport { DirectiveLocation } from './directiveLocation';\nimport { TokenKind } from './tokenKind';\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser =\n/*#__PURE__*/\nfunction () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj)));\n    this._lexer = createLexer(sourceObj);\n    this._options = options || {};\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.experimentalFragmentVariables) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        if (token.value === 'true' || token.value === 'false') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.BOOLEAN,\n            value: token.value === 'true',\n            loc: this.loc(token)\n          };\n        } else if (token.value === 'null') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.NULL,\n            loc: this.loc(token)\n          };\n        }\n\n        this._lexer.advance();\n\n        return {\n          kind: Kind.ENUM,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      this._options.allowLegacySDLImplementsInterfaces && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    // Legacy support for the SDL?\n    if (this._options.allowLegacySDLEmptyFields && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *   - extend interface Name Directives[Const]? FieldsDefinition\n   *   - extend interface Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    if (!this._options.noLocation) {\n      return new Loc(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken || this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n","/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n","import inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {\n            var k = _Object$keys2[_i2];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n","var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;\n","/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}\n","import { visit } from './visitor';\nimport { printBlockString } from './blockString';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n} // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        repeatable = _ref31.repeatable,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n\nfunction isMultiline(string) {\n  return string.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray && maybeArray.some(isMultiline);\n}\n","import isObjectLike from '../jsutils/isObjectLike';\nimport { getLocation } from '../language/location';\nimport { printLocation, printSourceLocation } from '../language/printLocation';\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions;\n\n  if (_extensions == null && originalError != null) {\n    var originalExtensions = originalError.extensions;\n\n    if (isObjectLike(originalExtensions)) {\n      _extensions = originalExtensions;\n    }\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n","import devAssert from '../jsutils/devAssert';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive');\n  this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive');\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);\n","import { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n  var customInspectFn = getCustomFn(value);\n\n  if (customInspectFn !== undefined) {\n    // $FlowFixMe(>=0.90.0)\n    var customValue = customInspectFn.call(value); // check for infinite recursion\n\n    if (customValue !== value) {\n      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","import nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON(classObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}\n","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}\n","import { getLocation } from '../language/location';\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var sublineIndex = Math.floor(columnNum / 80);\n    var sublineColumnNum = columnNum % 80;\n    var sublines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      sublines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), sublines[0]]].concat(sublines.slice(1, sublineIndex + 1).map(function (subline) {\n      return ['', subline];\n    }), [[' ', whitespace(sublineColumnNum - 1) + '^'], ['', sublines[sublineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n"],"sourceRoot":""}
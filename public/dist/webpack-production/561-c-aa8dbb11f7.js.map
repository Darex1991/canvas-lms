{"version":3,"sources":["webpack:///./app/jsx/canvasCssVariablesPolyfill.js"],"names":["images","brandableVariables","reduce","acc","cur","concat","variables","filter","e","type","map","variable_name","variablesMap","window","CANVAS_ACTIVE_BRAND_VARIABLES","variablesRegex","RegExp","Object","keys","join","processSheet","element","replaceCssVariablesWithStaticValues","cssText","replacedAtLeastOneVar","replacedCss","replace","match","name","replacement","includes","sheet","setAttribute","url","href","cacheKey","cached","sessionStorage","urlWithCacheBuster","get","then","setItem","forEach","call","document","querySelectorAll"],"mappings":";AAAA;AAAA;AAsBA,MAAMA,EAASC,EACZC,OAAO,CAACC,EAAKC,IAAQD,EAAIE,OAAOD,EAAIE,WAAY,IAChDC,OAAOC,GAAgB,UAAXA,EAAEC,MACdC,IAAIF,GAAKA,EAAEG,eAERC,EAAeC,OAAOC,+BAAiC,GAGvDC,EAAiB,IAAIC,OAAJ,0BACFC,OAAOC,KAAKN,GAAcO,KAAK,KAD7B,YAErB;AAGa,SAASC,EAAaC,GACnC,MAAMC,EAAsCC,IAC1C,IAAIC,GAAwB;AAC5B,MAAMC,EAAcF,EAAQG,QAAQX,EAAgB,CAACY,EAAOC,KAG1D,IAAIC,EAAcjB,EAAagB;AAC/B,OAAIC,GACFL,GAAwB,EAGpBxB,EAAO8B,SAASF,KAAOC,EAAc,QAAH,OAAWA,EAAX,OAE/BA,GAEAF;AAGPH,IAAuBH,EAAQU,MAAMR,QAAUE,GAEnDJ,EAAQW,aAAa,gCAAiCR,IAGlDS,EAAMZ,EAAQa,KACdC,EAAW,oBAAH,OAAuBF,GAC/BG,EAASC,eAAeF;AAC9B,GAAIC,EACFd,EAAoCc;IAC/B,CAQL,MAAME,EAAqB,GAAH,OAAML,EAAN;AACxBM,cAAID,GAAoBE,KAAKjB,IAC3BD,EAAoCC,GACpCc,eAAeI,QAAQN,EAAUZ,MAMtC,GAAGmB,QAAQC,KAAKC,SAASC,iBAAiB,0BAA2BzB","file":"561-c-aa8dbb11f7.js","sourcesContent":["/*\n * Copyright (C) 2017 - present Instructure, Inc.\n *\n * This file is part of Canvas.\n *\n * Canvas is free software: you can redistribute it and/or modify it under\n * the terms of the GNU Affero General Public License as published by the Free\n * Software Foundation, version 3 of the License.\n *\n * Canvas is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n * A PARTICULAR PURPOSE. See the GNU Affero General Public License for more\n * details.\n *\n * You should have received a copy of the GNU Affero General Public License along\n * with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {get} from 'jquery'\n\nimport brandableVariables from '../stylesheets/brandable_variables.json'\n\nconst images = brandableVariables\n  .reduce((acc, cur) => acc.concat(cur.variables), []) // flatten\n  .filter(e => e.type === 'image')\n  .map(e => e.variable_name)\n\nconst variablesMap = window.CANVAS_ACTIVE_BRAND_VARIABLES || {}\n\n// makes a regex that will match any occurrence of any of the brandable css variables in a stylesheet\nconst variablesRegex = new RegExp(\n  `\\\\bvar\\\\(\\\\s*--(${Object.keys(variablesMap).join('|')})\\\\s*\\\\)`,\n  'g'\n)\n\nexport default function processSheet(element) {\n  const replaceCssVariablesWithStaticValues = cssText => {\n    let replacedAtLeastOneVar = false\n    const replacedCss = cssText.replace(variablesRegex, (match, name) => {\n      // if this variable exists in CANVAS_ACTIVE_BRAND_VARIABLES, replace it with it's value.\n      // otherwise, leave it unchanged\n      let replacement = variablesMap[name]\n      if (replacement) {\n        replacedAtLeastOneVar = true\n\n        // the json contains raw urls for images, wrap them in css `url(...)` syntax.\n        if (images.includes(name)) replacement = `url('${replacement}')`\n\n        return replacement\n      } else {\n        return match\n      }\n    })\n    if (replacedAtLeastOneVar) element.sheet.cssText = replacedCss\n    // give anyone trying to debug things a hint that we processed this file\n    element.setAttribute('data-css-variables-polyfilled', replacedAtLeastOneVar)\n  }\n\n  const url = element.href\n  const cacheKey = `cssPolyfillCache-${url}`\n  const cached = sessionStorage[cacheKey]\n  if (cached) {\n    replaceCssVariablesWithStaticValues(cached)\n  } else {\n    // Edge tries to reuse the cached resource it downloaded for the <link... tag for this,\n    // but since when it made that request it didn't include an `origin:` request header,\n    // cloudfront won't include the `access-control-allow-origin: *` response header.\n    // so when it tries to reuse that response it fails with \"No access-control-allow-origin header\".\n    // I wish Edge would either treat it as a new request (because the new request has different request headers)\n    // and issue a new http request or that cloudfront would include `access-control-allow-origin: *` even\n    // when an `origin:` header is not present, then we wouldn't need this.\n    const urlWithCacheBuster = `${url}?forceEdgeToDownloadNewResourceSoItHasAccessControlAllowOriginHeader`\n    get(urlWithCacheBuster).then(cssText => {\n      replaceCssVariablesWithStaticValues(cssText)\n      sessionStorage.setItem(cacheKey, cssText)\n    })\n  }\n}\n\n// run polyfill against all stylesheets on the page\n;[].forEach.call(document.querySelectorAll('link[rel=\"stylesheet\"]'), processSheet)\n"],"sourceRoot":""}